import pytest
from pathlib import Path

from aoc_2023.day3.day3 import (
    get_numbers_and_adjacent,
    get_adjacent_cells,
    get_gears,
    solution_day_3_part_1,
    solution_day_3_part_2,
)

example1 = """
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
"""

example2 = """
....411...............838......721.....44..............................................607..................................................
...&......519..................*..........#.97.........994..............404..............*...&43........440...882.......673.505.............
.....*......*...892.........971...%....131....*..........*.......515...$.......157.....412.............-.....*.............*............594.
..856.495....13...-...............602..........36...$.985....341*.........88.....*.921....................122..................806..508.....
......................667.325*734.................718...............284..*....288..*....620.......854.............643....817....*...........
....*480..825..........*....................784.......&.............*...859........856.*..........*...........................137...........
............*..903*986.681....403.....451...*.....424..24.855....844....................826.......202....-.........542%..564......@.212*....
......735...70.............=.....*895.......575.....*......*.............490.........+.......114.......890....519...........*857.88.....761.
.......%..........#.#.....896.....................600.821@..565.............*390..664........@...292@..................%....................
"""


@pytest.mark.parametrize(
    "text,y,x_start,x_end,expected",
    [
        ("xabcdex\nxf123gx\nxhijklx", 1, 2, 5, set("abcdefghijkl")),
        ("123a\nbcde", 0, 0, 3, set("abcde")),
        ("123.\n..34", 0, 0, 3, set("34")),
        ("$ac.\n..34", 1, 2, 4, set("ac")),
    ],
)
def test__get_adjacent_cells(text, y, x_start, x_end, expected):
    assert get_adjacent_cells(text, y, x_start, x_end) == expected


@pytest.mark.parametrize(
    "text,expected",
    [
        (
            example1,
            [467, 35, 633, 617, 592, 755, 664, 598],
        ),
        (
            example2,
            [
                *[411, 721, 607, 519, 97, 994, 404, 43, 440, 882, 673, 505, 892],
                *[971, 131, 515, 157, 412, 856, 495, 13, 602, 36, 985, 341, 88],
                *[921, 122, 806, 667, 325, 734, 718, 284, 288, 620, 854, 480, 825, 784],
                *[859, 856, 137, 903, 986, 681, 403, 424, 24, 855, 844, 826, 202],
                *[542, 564, 212, 735, 70, 895, 575, 490, 114, 890, 857, 88, 761],
                *[896, 600, 821, 565, 390, 664, 292],
            ],
        ),
    ],
)
def test__get_numbers_and_adjacent(text, expected):
    assert get_numbers_and_adjacent(text) == expected


def test__get_gears():
    assert get_gears(example1) == [{467, 35}, {755, 598}]


def test__solution_day_3_part_1():
    assert solution_day_3_part_1(example1) == 4361


def test__solution_day_3_part_2():
    assert solution_day_3_part_2(example1) == 467835


def test__regression():
    filename = Path(__file__).parent / "input"
    assert solution_day_3_part_1(open(filename).read()) == 527446
    assert solution_day_3_part_2(open(filename).read()) == 73201705
